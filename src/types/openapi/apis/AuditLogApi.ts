// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.13.1-SNAPSHOT
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    AuditLogResponseDto,
    AuthenticationServiceExceptionDto,
    ErrorMessageDto,
    SearchFieldDataByGroupDto,
    SearchFilterRequestDto,
    SearchRequestDto,
} from '../models';

export interface ExportAuditLogsRequest {
    searchFilterRequestDto: Array<SearchFilterRequestDto>;
}

export interface ListAuditLogsRequest {
    searchRequestDto: SearchRequestDto;
}

export interface PurgeAuditLogsRequest {
    searchFilterRequestDto: Array<SearchFilterRequestDto>;
}

/**
 * no description
 */
export class AuditLogApi extends BaseAPI {

    /**
     * Export Audit logs
     */
    exportAuditLogs({ searchFilterRequestDto }: ExportAuditLogsRequest): Observable<Blob>
    exportAuditLogs({ searchFilterRequestDto }: ExportAuditLogsRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    exportAuditLogs({ searchFilterRequestDto }: ExportAuditLogsRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(searchFilterRequestDto, 'searchFilterRequestDto', 'exportAuditLogs');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Blob>({
            url: '/v1/auditLogs/export',
            method: 'POST',
            headers,
            body: searchFilterRequestDto,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Get Audit logs searchable fields information
     */
    getSearchableFieldInformation5(): Observable<Array<SearchFieldDataByGroupDto>>
    getSearchableFieldInformation5(opts?: OperationOpts): Observable<AjaxResponse<Array<SearchFieldDataByGroupDto>>>
    getSearchableFieldInformation5(opts?: OperationOpts): Observable<Array<SearchFieldDataByGroupDto> | AjaxResponse<Array<SearchFieldDataByGroupDto>>> {
        return this.request<Array<SearchFieldDataByGroupDto>>({
            url: '/v1/auditLogs/search',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * List Audit logs
     */
    listAuditLogs({ searchRequestDto }: ListAuditLogsRequest): Observable<AuditLogResponseDto>
    listAuditLogs({ searchRequestDto }: ListAuditLogsRequest, opts?: OperationOpts): Observable<AjaxResponse<AuditLogResponseDto>>
    listAuditLogs({ searchRequestDto }: ListAuditLogsRequest, opts?: OperationOpts): Observable<AuditLogResponseDto | AjaxResponse<AuditLogResponseDto>> {
        throwIfNullOrUndefined(searchRequestDto, 'searchRequestDto', 'listAuditLogs');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<AuditLogResponseDto>({
            url: '/v1/auditLogs',
            method: 'POST',
            headers,
            body: searchRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Purge Audit logs
     */
    purgeAuditLogs({ searchFilterRequestDto }: PurgeAuditLogsRequest): Observable<void>
    purgeAuditLogs({ searchFilterRequestDto }: PurgeAuditLogsRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    purgeAuditLogs({ searchFilterRequestDto }: PurgeAuditLogsRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(searchFilterRequestDto, 'searchFilterRequestDto', 'purgeAuditLogs');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/auditLogs/purge',
            method: 'POST',
            headers,
            body: searchFilterRequestDto,
        }, opts?.responseOpts);
    };

}
