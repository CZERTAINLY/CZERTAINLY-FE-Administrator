// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.15.2-SNAPSHOT
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    BulkActionMessageDto,
    ComplianceGroupListDto,
    ComplianceProfileDto,
    ComplianceProfileGroupsPatchRequestDto,
    ComplianceProfileListDto,
    ComplianceProfileRequestDto,
    ComplianceProfileRulesPatchRequestDto,
    ComplianceProfileUpdateRequestDto,
    ComplianceRuleListDto,
    ErrorMessageDto,
    Resource,
    ResourceObjectDto,
} from '../models';

export interface AssociateComplianceProfileV2Request {
    uuid: string;
    resource: Resource;
    associationObjectUuid: string;
}

export interface BulkDeleteComplianceProfilesV2Request {
    requestBody: Array<string>;
}

export interface CreateComplianceProfileV2Request {
    complianceProfileRequestDto: ComplianceProfileRequestDto;
}

export interface DeleteComplianceProfileV2Request {
    uuid: string;
}

export interface DisassociateComplianceProfileV2Request {
    uuid: string;
    resource: Resource;
    associationObjectUuid: string;
}

export interface ForceDeleteComplianceProfilesV2Request {
    requestBody: Array<string>;
}

export interface GetAssociatedComplianceProfilesV2Request {
    resource: Resource;
    associationObjectUuid: string;
}

export interface GetAssociationsV2Request {
    uuid: string;
}

export interface GetComplianceGroupRulesV2Request {
    groupUuid: string;
    connectorUuid: string;
    kind: string;
}

export interface GetComplianceGroupsV2Request {
    connectorUuid: string;
    kind: string;
    resource?: Resource;
}

export interface GetComplianceProfileV2Request {
    uuid: string;
}

export interface GetComplianceRulesV2Request {
    resource: Resource;
    connectorUuid?: string;
    kind?: string;
    type?: string;
    format?: string;
}

export interface PatchComplianceProfileGroupV2Request {
    uuid: string;
    complianceProfileGroupsPatchRequestDto: ComplianceProfileGroupsPatchRequestDto;
}

export interface PatchComplianceProfileRuleV2Request {
    uuid: string;
    complianceProfileRulesPatchRequestDto: ComplianceProfileRulesPatchRequestDto;
}

export interface UpdateComplianceProfileV2Request {
    uuid: string;
    complianceProfileUpdateRequestDto: ComplianceProfileUpdateRequestDto;
}

/**
 * no description
 */
export class ComplianceProfileManagementV2Api extends BaseAPI {

    /**
     * Associate Compliance Profile to specified resource object
     */
    associateComplianceProfileV2({ uuid, resource, associationObjectUuid }: AssociateComplianceProfileV2Request): Observable<void>
    associateComplianceProfileV2({ uuid, resource, associationObjectUuid }: AssociateComplianceProfileV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    associateComplianceProfileV2({ uuid, resource, associationObjectUuid }: AssociateComplianceProfileV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'associateComplianceProfileV2');
        throwIfNullOrUndefined(resource, 'resource', 'associateComplianceProfileV2');
        throwIfNullOrUndefined(associationObjectUuid, 'associationObjectUuid', 'associateComplianceProfileV2');

        return this.request<void>({
            url: '/v2/complianceProfiles/{uuid}/associations/{resource}/{associationObjectUuid}'.replace('{uuid}', encodeURI(uuid)).replace('{resource}', encodeURI(resource)).replace('{associationObjectUuid}', encodeURI(associationObjectUuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Delete multiple Compliance Profiles
     */
    bulkDeleteComplianceProfilesV2({ requestBody }: BulkDeleteComplianceProfilesV2Request): Observable<Array<BulkActionMessageDto>>
    bulkDeleteComplianceProfilesV2({ requestBody }: BulkDeleteComplianceProfilesV2Request, opts?: OperationOpts): Observable<AjaxResponse<Array<BulkActionMessageDto>>>
    bulkDeleteComplianceProfilesV2({ requestBody }: BulkDeleteComplianceProfilesV2Request, opts?: OperationOpts): Observable<Array<BulkActionMessageDto> | AjaxResponse<Array<BulkActionMessageDto>>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'bulkDeleteComplianceProfilesV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<BulkActionMessageDto>>({
            url: '/v2/complianceProfiles',
            method: 'DELETE',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Add Compliance Profile
     */
    createComplianceProfileV2({ complianceProfileRequestDto }: CreateComplianceProfileV2Request): Observable<ComplianceProfileDto>
    createComplianceProfileV2({ complianceProfileRequestDto }: CreateComplianceProfileV2Request, opts?: OperationOpts): Observable<AjaxResponse<ComplianceProfileDto>>
    createComplianceProfileV2({ complianceProfileRequestDto }: CreateComplianceProfileV2Request, opts?: OperationOpts): Observable<ComplianceProfileDto | AjaxResponse<ComplianceProfileDto>> {
        throwIfNullOrUndefined(complianceProfileRequestDto, 'complianceProfileRequestDto', 'createComplianceProfileV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ComplianceProfileDto>({
            url: '/v2/complianceProfiles',
            method: 'POST',
            headers,
            body: complianceProfileRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Delete Compliance Profile
     */
    deleteComplianceProfileV2({ uuid }: DeleteComplianceProfileV2Request): Observable<void>
    deleteComplianceProfileV2({ uuid }: DeleteComplianceProfileV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteComplianceProfileV2({ uuid }: DeleteComplianceProfileV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'deleteComplianceProfileV2');

        return this.request<void>({
            url: '/v2/complianceProfiles/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Disassociate Compliance Profile from specified resource object
     */
    disassociateComplianceProfileV2({ uuid, resource, associationObjectUuid }: DisassociateComplianceProfileV2Request): Observable<void>
    disassociateComplianceProfileV2({ uuid, resource, associationObjectUuid }: DisassociateComplianceProfileV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    disassociateComplianceProfileV2({ uuid, resource, associationObjectUuid }: DisassociateComplianceProfileV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'disassociateComplianceProfileV2');
        throwIfNullOrUndefined(resource, 'resource', 'disassociateComplianceProfileV2');
        throwIfNullOrUndefined(associationObjectUuid, 'associationObjectUuid', 'disassociateComplianceProfileV2');

        return this.request<void>({
            url: '/v2/complianceProfiles/{uuid}/associations/{resource}/{associationObjectUuid}'.replace('{uuid}', encodeURI(uuid)).replace('{resource}', encodeURI(resource)).replace('{associationObjectUuid}', encodeURI(associationObjectUuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Force delete Compliance Profiles
     */
    forceDeleteComplianceProfilesV2({ requestBody }: ForceDeleteComplianceProfilesV2Request): Observable<Array<BulkActionMessageDto>>
    forceDeleteComplianceProfilesV2({ requestBody }: ForceDeleteComplianceProfilesV2Request, opts?: OperationOpts): Observable<AjaxResponse<Array<BulkActionMessageDto>>>
    forceDeleteComplianceProfilesV2({ requestBody }: ForceDeleteComplianceProfilesV2Request, opts?: OperationOpts): Observable<Array<BulkActionMessageDto> | AjaxResponse<Array<BulkActionMessageDto>>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'forceDeleteComplianceProfilesV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<BulkActionMessageDto>>({
            url: '/v2/complianceProfiles/force',
            method: 'DELETE',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Get associated Compliance Profiles for resource object
     */
    getAssociatedComplianceProfilesV2({ resource, associationObjectUuid }: GetAssociatedComplianceProfilesV2Request): Observable<Array<ComplianceProfileListDto>>
    getAssociatedComplianceProfilesV2({ resource, associationObjectUuid }: GetAssociatedComplianceProfilesV2Request, opts?: OperationOpts): Observable<AjaxResponse<Array<ComplianceProfileListDto>>>
    getAssociatedComplianceProfilesV2({ resource, associationObjectUuid }: GetAssociatedComplianceProfilesV2Request, opts?: OperationOpts): Observable<Array<ComplianceProfileListDto> | AjaxResponse<Array<ComplianceProfileListDto>>> {
        throwIfNullOrUndefined(resource, 'resource', 'getAssociatedComplianceProfilesV2');
        throwIfNullOrUndefined(associationObjectUuid, 'associationObjectUuid', 'getAssociatedComplianceProfilesV2');

        return this.request<Array<ComplianceProfileListDto>>({
            url: '/v2/complianceProfiles/associations/{resource}/{associationObjectUuid}'.replace('{resource}', encodeURI(resource)).replace('{associationObjectUuid}', encodeURI(associationObjectUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get associations of Compliance Profile
     */
    getAssociationsV2({ uuid }: GetAssociationsV2Request): Observable<Array<ResourceObjectDto>>
    getAssociationsV2({ uuid }: GetAssociationsV2Request, opts?: OperationOpts): Observable<AjaxResponse<Array<ResourceObjectDto>>>
    getAssociationsV2({ uuid }: GetAssociationsV2Request, opts?: OperationOpts): Observable<Array<ResourceObjectDto> | AjaxResponse<Array<ResourceObjectDto>>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'getAssociationsV2');

        return this.request<Array<ResourceObjectDto>>({
            url: '/v2/complianceProfiles/{uuid}/associations'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get Compliance group rules
     */
    getComplianceGroupRulesV2({ groupUuid, connectorUuid, kind }: GetComplianceGroupRulesV2Request): Observable<Array<ComplianceRuleListDto>>
    getComplianceGroupRulesV2({ groupUuid, connectorUuid, kind }: GetComplianceGroupRulesV2Request, opts?: OperationOpts): Observable<AjaxResponse<Array<ComplianceRuleListDto>>>
    getComplianceGroupRulesV2({ groupUuid, connectorUuid, kind }: GetComplianceGroupRulesV2Request, opts?: OperationOpts): Observable<Array<ComplianceRuleListDto> | AjaxResponse<Array<ComplianceRuleListDto>>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'getComplianceGroupRulesV2');
        throwIfNullOrUndefined(connectorUuid, 'connectorUuid', 'getComplianceGroupRulesV2');
        throwIfNullOrUndefined(kind, 'kind', 'getComplianceGroupRulesV2');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'connectorUuid': connectorUuid,
            'kind': kind,
        };

        return this.request<Array<ComplianceRuleListDto>>({
            url: '/v2/complianceProfiles/groups/{groupUuid}/rules'.replace('{groupUuid}', encodeURI(groupUuid)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Compliance groups
     */
    getComplianceGroupsV2({ connectorUuid, kind, resource }: GetComplianceGroupsV2Request): Observable<Array<ComplianceGroupListDto>>
    getComplianceGroupsV2({ connectorUuid, kind, resource }: GetComplianceGroupsV2Request, opts?: OperationOpts): Observable<AjaxResponse<Array<ComplianceGroupListDto>>>
    getComplianceGroupsV2({ connectorUuid, kind, resource }: GetComplianceGroupsV2Request, opts?: OperationOpts): Observable<Array<ComplianceGroupListDto> | AjaxResponse<Array<ComplianceGroupListDto>>> {
        throwIfNullOrUndefined(connectorUuid, 'connectorUuid', 'getComplianceGroupsV2');
        throwIfNullOrUndefined(kind, 'kind', 'getComplianceGroupsV2');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'connectorUuid': connectorUuid,
            'kind': kind,
        };

        if (resource != null) { query['resource'] = resource; }

        return this.request<Array<ComplianceGroupListDto>>({
            url: '/v2/complianceProfiles/groups',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Details of a Compliance Profile
     */
    getComplianceProfileV2({ uuid }: GetComplianceProfileV2Request): Observable<ComplianceProfileDto>
    getComplianceProfileV2({ uuid }: GetComplianceProfileV2Request, opts?: OperationOpts): Observable<AjaxResponse<ComplianceProfileDto>>
    getComplianceProfileV2({ uuid }: GetComplianceProfileV2Request, opts?: OperationOpts): Observable<ComplianceProfileDto | AjaxResponse<ComplianceProfileDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'getComplianceProfileV2');

        return this.request<ComplianceProfileDto>({
            url: '/v2/complianceProfiles/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Lists compliance rules. If provider UUID is sent (also kind is required) then provider rules are listed, otherwise lists internal rules
     * Get Compliance rules
     */
    getComplianceRulesV2({ resource, connectorUuid, kind, type, format }: GetComplianceRulesV2Request): Observable<Array<ComplianceRuleListDto>>
    getComplianceRulesV2({ resource, connectorUuid, kind, type, format }: GetComplianceRulesV2Request, opts?: OperationOpts): Observable<AjaxResponse<Array<ComplianceRuleListDto>>>
    getComplianceRulesV2({ resource, connectorUuid, kind, type, format }: GetComplianceRulesV2Request, opts?: OperationOpts): Observable<Array<ComplianceRuleListDto> | AjaxResponse<Array<ComplianceRuleListDto>>> {
        throwIfNullOrUndefined(resource, 'resource', 'getComplianceRulesV2');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'resource': resource,
        };

        if (connectorUuid != null) { query['connectorUuid'] = connectorUuid; }
        if (kind != null) { query['kind'] = kind; }
        if (type != null) { query['type'] = type; }
        if (format != null) { query['format'] = format; }

        return this.request<Array<ComplianceRuleListDto>>({
            url: '/v2/complianceProfiles/rules',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * List of available Compliance Profiles
     */
    listComplianceProfilesV2(): Observable<Array<ComplianceProfileListDto>>
    listComplianceProfilesV2(opts?: OperationOpts): Observable<AjaxResponse<Array<ComplianceProfileListDto>>>
    listComplianceProfilesV2(opts?: OperationOpts): Observable<Array<ComplianceProfileListDto> | AjaxResponse<Array<ComplianceProfileListDto>>> {
        return this.request<Array<ComplianceProfileListDto>>({
            url: '/v2/complianceProfiles',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Add/remove group to/from Compliance Profile
     */
    patchComplianceProfileGroupV2({ uuid, complianceProfileGroupsPatchRequestDto }: PatchComplianceProfileGroupV2Request): Observable<void>
    patchComplianceProfileGroupV2({ uuid, complianceProfileGroupsPatchRequestDto }: PatchComplianceProfileGroupV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    patchComplianceProfileGroupV2({ uuid, complianceProfileGroupsPatchRequestDto }: PatchComplianceProfileGroupV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'patchComplianceProfileGroupV2');
        throwIfNullOrUndefined(complianceProfileGroupsPatchRequestDto, 'complianceProfileGroupsPatchRequestDto', 'patchComplianceProfileGroupV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v2/complianceProfiles/{uuid}/groups'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
            headers,
            body: complianceProfileGroupsPatchRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * If provider UUID is sent (also kind is required) then provider rules is handled, otherwise handling internal rule
     * Add/remove compliance rule to/from Compliance Profile
     */
    patchComplianceProfileRuleV2({ uuid, complianceProfileRulesPatchRequestDto }: PatchComplianceProfileRuleV2Request): Observable<void>
    patchComplianceProfileRuleV2({ uuid, complianceProfileRulesPatchRequestDto }: PatchComplianceProfileRuleV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    patchComplianceProfileRuleV2({ uuid, complianceProfileRulesPatchRequestDto }: PatchComplianceProfileRuleV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'patchComplianceProfileRuleV2');
        throwIfNullOrUndefined(complianceProfileRulesPatchRequestDto, 'complianceProfileRulesPatchRequestDto', 'patchComplianceProfileRuleV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v2/complianceProfiles/{uuid}/rules'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
            headers,
            body: complianceProfileRulesPatchRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Update Compliance Profile
     */
    updateComplianceProfileV2({ uuid, complianceProfileUpdateRequestDto }: UpdateComplianceProfileV2Request): Observable<ComplianceProfileDto>
    updateComplianceProfileV2({ uuid, complianceProfileUpdateRequestDto }: UpdateComplianceProfileV2Request, opts?: OperationOpts): Observable<AjaxResponse<ComplianceProfileDto>>
    updateComplianceProfileV2({ uuid, complianceProfileUpdateRequestDto }: UpdateComplianceProfileV2Request, opts?: OperationOpts): Observable<ComplianceProfileDto | AjaxResponse<ComplianceProfileDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'updateComplianceProfileV2');
        throwIfNullOrUndefined(complianceProfileUpdateRequestDto, 'complianceProfileUpdateRequestDto', 'updateComplianceProfileV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ComplianceProfileDto>({
            url: '/v2/complianceProfiles/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: complianceProfileUpdateRequestDto,
        }, opts?.responseOpts);
    };

}
