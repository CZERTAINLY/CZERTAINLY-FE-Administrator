// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.12.1-SNAPSHOT
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    ConditionDto,
    ConditionRequestDto,
    Resource,
    RuleDetailDto,
    RuleDto,
    RuleRequestDto,
    UpdateConditionRequestDto,
    UpdateRuleRequestDto,
} from '../models';

export interface CreateConditionRequest {
    conditionRequestDto: ConditionRequestDto;
}

export interface CreateRuleRequest {
    ruleRequestDto: RuleRequestDto;
}

export interface DeleteConditionRequest {
    conditionUuid: string;
}

export interface DeleteRuleRequest {
    ruleUuid: string;
}

export interface GetConditionRequest {
    conditionUuid: string;
}

export interface GetRuleRequest {
    ruleUuid: string;
}

export interface ListConditionsRequest {
    resource?: Resource;
}

export interface ListRulesRequest {
    resource?: Resource;
}

export interface UpdateConditionRequest {
    conditionUuid: string;
    updateConditionRequestDto: UpdateConditionRequestDto;
}

export interface UpdateRuleRequest {
    ruleUuid: string;
    updateRuleRequestDto: UpdateRuleRequestDto;
}

/**
 * no description
 */
export class WorkflowRulesManagementApi extends BaseAPI {

    /**
     * Create Condition
     */
    createCondition({ conditionRequestDto }: CreateConditionRequest): Observable<ConditionDto>
    createCondition({ conditionRequestDto }: CreateConditionRequest, opts?: OperationOpts): Observable<AjaxResponse<ConditionDto>>
    createCondition({ conditionRequestDto }: CreateConditionRequest, opts?: OperationOpts): Observable<ConditionDto | AjaxResponse<ConditionDto>> {
        throwIfNullOrUndefined(conditionRequestDto, 'conditionRequestDto', 'createCondition');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ConditionDto>({
            url: '/v1/workflows/conditions',
            method: 'POST',
            headers,
            body: conditionRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Create Rule
     */
    createRule({ ruleRequestDto }: CreateRuleRequest): Observable<RuleDetailDto>
    createRule({ ruleRequestDto }: CreateRuleRequest, opts?: OperationOpts): Observable<AjaxResponse<RuleDetailDto>>
    createRule({ ruleRequestDto }: CreateRuleRequest, opts?: OperationOpts): Observable<RuleDetailDto | AjaxResponse<RuleDetailDto>> {
        throwIfNullOrUndefined(ruleRequestDto, 'ruleRequestDto', 'createRule');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RuleDetailDto>({
            url: '/v1/workflows/rules',
            method: 'POST',
            headers,
            body: ruleRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Delete Condition
     */
    deleteCondition({ conditionUuid }: DeleteConditionRequest): Observable<void>
    deleteCondition({ conditionUuid }: DeleteConditionRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteCondition({ conditionUuid }: DeleteConditionRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(conditionUuid, 'conditionUuid', 'deleteCondition');

        return this.request<void>({
            url: '/v1/workflows/conditions/{conditionUuid}'.replace('{conditionUuid}', encodeURI(conditionUuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Delete Rule
     */
    deleteRule({ ruleUuid }: DeleteRuleRequest): Observable<void>
    deleteRule({ ruleUuid }: DeleteRuleRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteRule({ ruleUuid }: DeleteRuleRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(ruleUuid, 'ruleUuid', 'deleteRule');

        return this.request<void>({
            url: '/v1/workflows/rules/{ruleUuid}'.replace('{ruleUuid}', encodeURI(ruleUuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Get Condition details
     */
    getCondition({ conditionUuid }: GetConditionRequest): Observable<ConditionDto>
    getCondition({ conditionUuid }: GetConditionRequest, opts?: OperationOpts): Observable<AjaxResponse<ConditionDto>>
    getCondition({ conditionUuid }: GetConditionRequest, opts?: OperationOpts): Observable<ConditionDto | AjaxResponse<ConditionDto>> {
        throwIfNullOrUndefined(conditionUuid, 'conditionUuid', 'getCondition');

        return this.request<ConditionDto>({
            url: '/v1/workflows/conditions/{conditionUuid}'.replace('{conditionUuid}', encodeURI(conditionUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get Rule details
     */
    getRule({ ruleUuid }: GetRuleRequest): Observable<RuleDetailDto>
    getRule({ ruleUuid }: GetRuleRequest, opts?: OperationOpts): Observable<AjaxResponse<RuleDetailDto>>
    getRule({ ruleUuid }: GetRuleRequest, opts?: OperationOpts): Observable<RuleDetailDto | AjaxResponse<RuleDetailDto>> {
        throwIfNullOrUndefined(ruleUuid, 'ruleUuid', 'getRule');

        return this.request<RuleDetailDto>({
            url: '/v1/workflows/rules/{ruleUuid}'.replace('{ruleUuid}', encodeURI(ruleUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * List Conditions
     */
    listConditions({ resource }: ListConditionsRequest): Observable<Array<ConditionDto>>
    listConditions({ resource }: ListConditionsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<ConditionDto>>>
    listConditions({ resource }: ListConditionsRequest, opts?: OperationOpts): Observable<Array<ConditionDto> | AjaxResponse<Array<ConditionDto>>> {

        const query: HttpQuery = {};

        if (resource != null) { query['resource'] = resource; }

        return this.request<Array<ConditionDto>>({
            url: '/v1/workflows/conditions',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * List Rules
     */
    listRules({ resource }: ListRulesRequest): Observable<Array<RuleDto>>
    listRules({ resource }: ListRulesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<RuleDto>>>
    listRules({ resource }: ListRulesRequest, opts?: OperationOpts): Observable<Array<RuleDto> | AjaxResponse<Array<RuleDto>>> {

        const query: HttpQuery = {};

        if (resource != null) { query['resource'] = resource; }

        return this.request<Array<RuleDto>>({
            url: '/v1/workflows/rules',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Condition
     */
    updateCondition({ conditionUuid, updateConditionRequestDto }: UpdateConditionRequest): Observable<ConditionDto>
    updateCondition({ conditionUuid, updateConditionRequestDto }: UpdateConditionRequest, opts?: OperationOpts): Observable<AjaxResponse<ConditionDto>>
    updateCondition({ conditionUuid, updateConditionRequestDto }: UpdateConditionRequest, opts?: OperationOpts): Observable<ConditionDto | AjaxResponse<ConditionDto>> {
        throwIfNullOrUndefined(conditionUuid, 'conditionUuid', 'updateCondition');
        throwIfNullOrUndefined(updateConditionRequestDto, 'updateConditionRequestDto', 'updateCondition');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ConditionDto>({
            url: '/v1/workflows/conditions/{conditionUuid}'.replace('{conditionUuid}', encodeURI(conditionUuid)),
            method: 'PUT',
            headers,
            body: updateConditionRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Update Rule
     */
    updateRule({ ruleUuid, updateRuleRequestDto }: UpdateRuleRequest): Observable<RuleDetailDto>
    updateRule({ ruleUuid, updateRuleRequestDto }: UpdateRuleRequest, opts?: OperationOpts): Observable<AjaxResponse<RuleDetailDto>>
    updateRule({ ruleUuid, updateRuleRequestDto }: UpdateRuleRequest, opts?: OperationOpts): Observable<RuleDetailDto | AjaxResponse<RuleDetailDto>> {
        throwIfNullOrUndefined(ruleUuid, 'ruleUuid', 'updateRule');
        throwIfNullOrUndefined(updateRuleRequestDto, 'updateRuleRequestDto', 'updateRule');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RuleDetailDto>({
            url: '/v1/workflows/rules/{ruleUuid}'.replace('{ruleUuid}', encodeURI(ruleUuid)),
            method: 'PUT',
            headers,
            body: updateRuleRequestDto,
        }, opts?.responseOpts);
    };

}
