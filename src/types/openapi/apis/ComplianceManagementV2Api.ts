// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.15.2-SNAPSHOT
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    ComplianceCheckResultDto,
    ErrorMessageDto,
    Resource,
} from '../models';

export interface CheckComplianceV2Request {
    requestBody: Array<string>;
    resource?: Resource;
    type?: string;
}

export interface CheckResourceObjectComplianceV2Request {
    resource: Resource;
    objectUuid: string;
}

export interface CheckResourceObjectsComplianceV2Request {
    resource: Resource;
    requestBody: Array<string>;
}

export interface GetComplianceCheckResultV2Request {
    resource: Resource;
    objectUuid: string;
}

/**
 * no description
 */
export class ComplianceManagementV2Api extends BaseAPI {

    /**
     * Initiate compliance check for requested compliance profiles
     */
    checkComplianceV2({ requestBody, resource, type }: CheckComplianceV2Request): Observable<void>
    checkComplianceV2({ requestBody, resource, type }: CheckComplianceV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    checkComplianceV2({ requestBody, resource, type }: CheckComplianceV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'checkComplianceV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = {};

        if (resource != null) { query['resource'] = resource; }
        if (type != null) { query['type'] = type; }

        return this.request<void>({
            url: '/v2/compliance',
            method: 'POST',
            headers,
            query,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Initiate compliance Check for requested resource object
     */
    checkResourceObjectComplianceV2({ resource, objectUuid }: CheckResourceObjectComplianceV2Request): Observable<void>
    checkResourceObjectComplianceV2({ resource, objectUuid }: CheckResourceObjectComplianceV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    checkResourceObjectComplianceV2({ resource, objectUuid }: CheckResourceObjectComplianceV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(resource, 'resource', 'checkResourceObjectComplianceV2');
        throwIfNullOrUndefined(objectUuid, 'objectUuid', 'checkResourceObjectComplianceV2');

        return this.request<void>({
            url: '/v2/compliance/{resource}/{objectUuid}'.replace('{resource}', encodeURI(resource)).replace('{objectUuid}', encodeURI(objectUuid)),
            method: 'POST',
        }, opts?.responseOpts);
    };

    /**
     * Initiate compliance Check for requested resource objects
     */
    checkResourceObjectsComplianceV2({ resource, requestBody }: CheckResourceObjectsComplianceV2Request): Observable<void>
    checkResourceObjectsComplianceV2({ resource, requestBody }: CheckResourceObjectsComplianceV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    checkResourceObjectsComplianceV2({ resource, requestBody }: CheckResourceObjectsComplianceV2Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(resource, 'resource', 'checkResourceObjectsComplianceV2');
        throwIfNullOrUndefined(requestBody, 'requestBody', 'checkResourceObjectsComplianceV2');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v2/compliance/{resource}'.replace('{resource}', encodeURI(resource)),
            method: 'POST',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Get the latest compliance check result for the specified resource object
     */
    getComplianceCheckResultV2({ resource, objectUuid }: GetComplianceCheckResultV2Request): Observable<ComplianceCheckResultDto>
    getComplianceCheckResultV2({ resource, objectUuid }: GetComplianceCheckResultV2Request, opts?: OperationOpts): Observable<AjaxResponse<ComplianceCheckResultDto>>
    getComplianceCheckResultV2({ resource, objectUuid }: GetComplianceCheckResultV2Request, opts?: OperationOpts): Observable<ComplianceCheckResultDto | AjaxResponse<ComplianceCheckResultDto>> {
        throwIfNullOrUndefined(resource, 'resource', 'getComplianceCheckResultV2');
        throwIfNullOrUndefined(objectUuid, 'objectUuid', 'getComplianceCheckResultV2');

        return this.request<ComplianceCheckResultDto>({
            url: '/v2/compliance/{resource}/{objectUuid}'.replace('{resource}', encodeURI(resource)).replace('{objectUuid}', encodeURI(objectUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

}
