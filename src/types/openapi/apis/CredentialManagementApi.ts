// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.12.1-SNAPSHOT
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    CredentialDto,
    CredentialRequestDto,
    CredentialUpdateRequestDto,
    ErrorMessageDto,
    UuidDto,
} from '../models';

export interface BulkDeleteCredentialRequest {
    requestBody: Array<string>;
}

export interface CreateCredentialRequest {
    credentialRequestDto: CredentialRequestDto;
}

export interface DeleteCredentialRequest {
    uuid: string;
}

export interface DisableCredentialRequest {
    uuid: string;
}

export interface EditCredentialRequest {
    uuid: string;
    credentialUpdateRequestDto: CredentialUpdateRequestDto;
}

export interface EnableCredentialRequest {
    uuid: string;
}

export interface GetCredentialRequest {
    uuid: string;
}

/**
 * no description
 */
export class CredentialManagementApi extends BaseAPI {

    /**
     * Delete multiple Credentials
     */
    bulkDeleteCredential({ requestBody }: BulkDeleteCredentialRequest): Observable<void>
    bulkDeleteCredential({ requestBody }: BulkDeleteCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    bulkDeleteCredential({ requestBody }: BulkDeleteCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'bulkDeleteCredential');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/credentials',
            method: 'DELETE',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Add Credential
     */
    createCredential({ credentialRequestDto }: CreateCredentialRequest): Observable<UuidDto>
    createCredential({ credentialRequestDto }: CreateCredentialRequest, opts?: OperationOpts): Observable<AjaxResponse<UuidDto>>
    createCredential({ credentialRequestDto }: CreateCredentialRequest, opts?: OperationOpts): Observable<UuidDto | AjaxResponse<UuidDto>> {
        throwIfNullOrUndefined(credentialRequestDto, 'credentialRequestDto', 'createCredential');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<UuidDto>({
            url: '/v1/credentials',
            method: 'POST',
            headers,
            body: credentialRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Delete Credential
     */
    deleteCredential({ uuid }: DeleteCredentialRequest): Observable<void>
    deleteCredential({ uuid }: DeleteCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteCredential({ uuid }: DeleteCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'deleteCredential');

        return this.request<void>({
            url: '/v1/credentials/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Disable Credential
     */
    disableCredential({ uuid }: DisableCredentialRequest): Observable<void>
    disableCredential({ uuid }: DisableCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    disableCredential({ uuid }: DisableCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'disableCredential');

        return this.request<void>({
            url: '/v1/credentials/{uuid}/disable'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Edit Credential
     */
    editCredential({ uuid, credentialUpdateRequestDto }: EditCredentialRequest): Observable<CredentialDto>
    editCredential({ uuid, credentialUpdateRequestDto }: EditCredentialRequest, opts?: OperationOpts): Observable<AjaxResponse<CredentialDto>>
    editCredential({ uuid, credentialUpdateRequestDto }: EditCredentialRequest, opts?: OperationOpts): Observable<CredentialDto | AjaxResponse<CredentialDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'editCredential');
        throwIfNullOrUndefined(credentialUpdateRequestDto, 'credentialUpdateRequestDto', 'editCredential');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<CredentialDto>({
            url: '/v1/credentials/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: credentialUpdateRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Enable Credential
     */
    enableCredential({ uuid }: EnableCredentialRequest): Observable<void>
    enableCredential({ uuid }: EnableCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    enableCredential({ uuid }: EnableCredentialRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'enableCredential');

        return this.request<void>({
            url: '/v1/credentials/{uuid}/enable'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Details of a Credentials
     */
    getCredential({ uuid }: GetCredentialRequest): Observable<CredentialDto>
    getCredential({ uuid }: GetCredentialRequest, opts?: OperationOpts): Observable<AjaxResponse<CredentialDto>>
    getCredential({ uuid }: GetCredentialRequest, opts?: OperationOpts): Observable<CredentialDto | AjaxResponse<CredentialDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'getCredential');

        return this.request<CredentialDto>({
            url: '/v1/credentials/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * List of All Credentials
     */
    listCredentials(): Observable<Array<CredentialDto>>
    listCredentials(opts?: OperationOpts): Observable<AjaxResponse<Array<CredentialDto>>>
    listCredentials(opts?: OperationOpts): Observable<Array<CredentialDto> | AjaxResponse<Array<CredentialDto>>> {
        return this.request<Array<CredentialDto>>({
            url: '/v1/credentials',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
