// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.12.1-SNAPSHOT
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    Resource,
    ResourceDto,
    ResourceEventDto,
    SearchFieldDataByGroupDto,
} from '../models';

export interface ListResourceEventsRequest {
    resource: Resource;
}

export interface ListResourceRuleFilterFieldsRequest {
    resource: Resource;
    settable?: boolean;
}

/**
 * no description
 */
export class ResourceManagementApi extends BaseAPI {

    /**
     * Retrieve a list of all events that can be triggered by a resource
     */
    listResourceEvents({ resource }: ListResourceEventsRequest): Observable<Array<ResourceEventDto>>
    listResourceEvents({ resource }: ListResourceEventsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<ResourceEventDto>>>
    listResourceEvents({ resource }: ListResourceEventsRequest, opts?: OperationOpts): Observable<Array<ResourceEventDto> | AjaxResponse<Array<ResourceEventDto>>> {
        throwIfNullOrUndefined(resource, 'resource', 'listResourceEvents');

        return this.request<Array<ResourceEventDto>>({
            url: '/v1/resources/{resource}/events'.replace('{resource}', encodeURI(resource)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve filter fields that can be used for creating rule conditions and actions
     */
    listResourceRuleFilterFields({ resource, settable }: ListResourceRuleFilterFieldsRequest): Observable<Array<SearchFieldDataByGroupDto>>
    listResourceRuleFilterFields({ resource, settable }: ListResourceRuleFilterFieldsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SearchFieldDataByGroupDto>>>
    listResourceRuleFilterFields({ resource, settable }: ListResourceRuleFilterFieldsRequest, opts?: OperationOpts): Observable<Array<SearchFieldDataByGroupDto> | AjaxResponse<Array<SearchFieldDataByGroupDto>>> {
        throwIfNullOrUndefined(resource, 'resource', 'listResourceRuleFilterFields');

        const query: HttpQuery = {};

        if (settable != null) { query['settable'] = settable; }

        return this.request<Array<SearchFieldDataByGroupDto>>({
            url: '/v1/resources/{resource}/filters/rules'.replace('{resource}', encodeURI(resource)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve list of resources with information and settings
     */
    listResources(): Observable<Array<ResourceDto>>
    listResources(opts?: OperationOpts): Observable<AjaxResponse<Array<ResourceDto>>>
    listResources(opts?: OperationOpts): Observable<Array<ResourceDto> | AjaxResponse<Array<ResourceDto>>> {
        return this.request<Array<ResourceDto>>({
            url: '/v1/resources',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
