// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    ErrorMessageDto,
    ScheduledJobDetailDto,
    ScheduledJobHistoryResponseDto,
    ScheduledJobsResponseDto,
    UpdateScheduledJob,
} from '../models';

export interface DeleteScheduledJobRequest {
    uuid: string;
}

export interface DisableScheduledJobRequest {
    uuid: string;
}

export interface EnableScheduledJobRequest {
    uuid: string;
}

export interface GetScheduledJobDetailRequest {
    uuid: string;
}

export interface GetScheduledJobHistoryRequest {
    uuid: string;
    itemsPerPage?: number;
    pageNumber?: number;
}

export interface ListScheduledJobsRequest {
    itemsPerPage?: number;
    pageNumber?: number;
}

export interface UpdateScheduledJobRequest {
    uuid: string;
    updateScheduledJob: UpdateScheduledJob;
}

/**
 * no description
 */
export class ScheduledJobsManagementApi extends BaseAPI {

    /**
     * Delete Scheduled job
     */
    deleteScheduledJob({ uuid }: DeleteScheduledJobRequest): Observable<void>
    deleteScheduledJob({ uuid }: DeleteScheduledJobRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteScheduledJob({ uuid }: DeleteScheduledJobRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'deleteScheduledJob');

        return this.request<void>({
            url: '/v1/scheduler/jobs/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Disabling of Scheduled job
     */
    disableScheduledJob({ uuid }: DisableScheduledJobRequest): Observable<void>
    disableScheduledJob({ uuid }: DisableScheduledJobRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    disableScheduledJob({ uuid }: DisableScheduledJobRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'disableScheduledJob');

        return this.request<void>({
            url: '/v1/scheduler/jobs/{uuid}/disable'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Enabling of Scheduled job
     */
    enableScheduledJob({ uuid }: EnableScheduledJobRequest): Observable<void>
    enableScheduledJob({ uuid }: EnableScheduledJobRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    enableScheduledJob({ uuid }: EnableScheduledJobRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'enableScheduledJob');

        return this.request<void>({
            url: '/v1/scheduler/jobs/{uuid}/enable'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Scheduled job detail
     */
    getScheduledJobDetail({ uuid }: GetScheduledJobDetailRequest): Observable<ScheduledJobDetailDto>
    getScheduledJobDetail({ uuid }: GetScheduledJobDetailRequest, opts?: OperationOpts): Observable<AjaxResponse<ScheduledJobDetailDto>>
    getScheduledJobDetail({ uuid }: GetScheduledJobDetailRequest, opts?: OperationOpts): Observable<ScheduledJobDetailDto | AjaxResponse<ScheduledJobDetailDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'getScheduledJobDetail');

        return this.request<ScheduledJobDetailDto>({
            url: '/v1/scheduler/jobs/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Scheduled job history
     */
    getScheduledJobHistory({ uuid, itemsPerPage, pageNumber }: GetScheduledJobHistoryRequest): Observable<ScheduledJobHistoryResponseDto>
    getScheduledJobHistory({ uuid, itemsPerPage, pageNumber }: GetScheduledJobHistoryRequest, opts?: OperationOpts): Observable<AjaxResponse<ScheduledJobHistoryResponseDto>>
    getScheduledJobHistory({ uuid, itemsPerPage, pageNumber }: GetScheduledJobHistoryRequest, opts?: OperationOpts): Observable<ScheduledJobHistoryResponseDto | AjaxResponse<ScheduledJobHistoryResponseDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'getScheduledJobHistory');

        const query: HttpQuery = {};

        if (itemsPerPage != null) { query['itemsPerPage'] = itemsPerPage; }
        if (pageNumber != null) { query['pageNumber'] = pageNumber; }

        return this.request<ScheduledJobHistoryResponseDto>({
            url: '/v1/scheduler/jobs/{uuid}/history'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * List of scheduled jobs
     */
    listScheduledJobs({ itemsPerPage, pageNumber }: ListScheduledJobsRequest): Observable<ScheduledJobsResponseDto>
    listScheduledJobs({ itemsPerPage, pageNumber }: ListScheduledJobsRequest, opts?: OperationOpts): Observable<AjaxResponse<ScheduledJobsResponseDto>>
    listScheduledJobs({ itemsPerPage, pageNumber }: ListScheduledJobsRequest, opts?: OperationOpts): Observable<ScheduledJobsResponseDto | AjaxResponse<ScheduledJobsResponseDto>> {

        const query: HttpQuery = {};

        if (itemsPerPage != null) { query['itemsPerPage'] = itemsPerPage; }
        if (pageNumber != null) { query['pageNumber'] = pageNumber; }

        return this.request<ScheduledJobsResponseDto>({
            url: '/v1/scheduler/jobs',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Edit Scheduled job
     */
    updateScheduledJob({ uuid, updateScheduledJob }: UpdateScheduledJobRequest): Observable<ScheduledJobDetailDto>
    updateScheduledJob({ uuid, updateScheduledJob }: UpdateScheduledJobRequest, opts?: OperationOpts): Observable<AjaxResponse<ScheduledJobDetailDto>>
    updateScheduledJob({ uuid, updateScheduledJob }: UpdateScheduledJobRequest, opts?: OperationOpts): Observable<ScheduledJobDetailDto | AjaxResponse<ScheduledJobDetailDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'updateScheduledJob');
        throwIfNullOrUndefined(updateScheduledJob, 'updateScheduledJob', 'updateScheduledJob');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ScheduledJobDetailDto>({
            url: '/v1/scheduler/jobs/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: updateScheduledJob,
        }, opts?.responseOpts);
    };

}
