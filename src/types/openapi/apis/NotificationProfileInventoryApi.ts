// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    ErrorMessageDto,
    NotificationProfileDetailDto,
    NotificationProfileRequestDto,
    NotificationProfileResponseDto,
    NotificationProfileUpdateRequestDto,
} from '../models';

export interface CreateNotificationProfileRequest {
    notificationProfileRequestDto: NotificationProfileRequestDto;
}

export interface DeleteNotificationProfileRequest {
    uuid: string;
}

export interface EditNotificationProfileRequest {
    uuid: string;
    notificationProfileUpdateRequestDto: NotificationProfileUpdateRequestDto;
}

export interface GetNotificationProfileRequest {
    uuid: string;
    version: number;
}

export interface ListNotificationProfilesRequest {
    itemsPerPage?: number;
    pageNumber?: number;
}

/**
 * no description
 */
export class NotificationProfileInventoryApi extends BaseAPI {

    /**
     * Create Notification profile
     */
    createNotificationProfile({ notificationProfileRequestDto }: CreateNotificationProfileRequest): Observable<NotificationProfileDetailDto>
    createNotificationProfile({ notificationProfileRequestDto }: CreateNotificationProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationProfileDetailDto>>
    createNotificationProfile({ notificationProfileRequestDto }: CreateNotificationProfileRequest, opts?: OperationOpts): Observable<NotificationProfileDetailDto | AjaxResponse<NotificationProfileDetailDto>> {
        throwIfNullOrUndefined(notificationProfileRequestDto, 'notificationProfileRequestDto', 'createNotificationProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<NotificationProfileDetailDto>({
            url: '/v1/notificationProfiles',
            method: 'POST',
            headers,
            body: notificationProfileRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Delete notification profile
     */
    deleteNotificationProfile({ uuid }: DeleteNotificationProfileRequest): Observable<void>
    deleteNotificationProfile({ uuid }: DeleteNotificationProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteNotificationProfile({ uuid }: DeleteNotificationProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'deleteNotificationProfile');

        return this.request<void>({
            url: '/v1/notificationProfiles/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Edit Notification profile
     */
    editNotificationProfile({ uuid, notificationProfileUpdateRequestDto }: EditNotificationProfileRequest): Observable<NotificationProfileDetailDto>
    editNotificationProfile({ uuid, notificationProfileUpdateRequestDto }: EditNotificationProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationProfileDetailDto>>
    editNotificationProfile({ uuid, notificationProfileUpdateRequestDto }: EditNotificationProfileRequest, opts?: OperationOpts): Observable<NotificationProfileDetailDto | AjaxResponse<NotificationProfileDetailDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'editNotificationProfile');
        throwIfNullOrUndefined(notificationProfileUpdateRequestDto, 'notificationProfileUpdateRequestDto', 'editNotificationProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<NotificationProfileDetailDto>({
            url: '/v1/notificationProfiles/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: notificationProfileUpdateRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Get Notification profile details
     */
    getNotificationProfile({ uuid, version }: GetNotificationProfileRequest): Observable<NotificationProfileDetailDto>
    getNotificationProfile({ uuid, version }: GetNotificationProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationProfileDetailDto>>
    getNotificationProfile({ uuid, version }: GetNotificationProfileRequest, opts?: OperationOpts): Observable<NotificationProfileDetailDto | AjaxResponse<NotificationProfileDetailDto>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'getNotificationProfile');
        throwIfNullOrUndefined(version, 'version', 'getNotificationProfile');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'version': version,
        };

        return this.request<NotificationProfileDetailDto>({
            url: '/v1/notificationProfiles/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * List Notification profiles
     */
    listNotificationProfiles({ itemsPerPage, pageNumber }: ListNotificationProfilesRequest): Observable<NotificationProfileResponseDto>
    listNotificationProfiles({ itemsPerPage, pageNumber }: ListNotificationProfilesRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationProfileResponseDto>>
    listNotificationProfiles({ itemsPerPage, pageNumber }: ListNotificationProfilesRequest, opts?: OperationOpts): Observable<NotificationProfileResponseDto | AjaxResponse<NotificationProfileResponseDto>> {

        const query: HttpQuery = {};

        if (itemsPerPage != null) { query['itemsPerPage'] = itemsPerPage; }
        if (pageNumber != null) { query['pageNumber'] = pageNumber; }

        return this.request<NotificationProfileResponseDto>({
            url: '/v1/notificationProfiles',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
