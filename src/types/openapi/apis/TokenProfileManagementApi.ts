// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 2.12.1-SNAPSHOT
 * Contact: info@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AddTokenProfileRequestDto,
    AuthenticationServiceExceptionDto,
    BulkTokenProfileKeyUsageRequestDto,
    EditTokenProfileRequestDto,
    ErrorMessageDto,
    TokenProfileDetailDto,
    TokenProfileDto,
    TokenProfileKeyUsageRequestDto,
} from '../models';

export interface CreateTokenProfileRequest {
    tokenInstanceUuid: string;
    addTokenProfileRequestDto: AddTokenProfileRequestDto;
}

export interface DeleteRaProfileWithoutTokenInstanceRequest {
    uuid: string;
}

export interface DeleteTokenProfileRequest {
    tokenInstanceUuid: string;
    uuid: string;
}

export interface DeleteTokenProfilesRequest {
    requestBody: Array<string>;
}

export interface DisableTokenProfileRequest {
    tokenInstanceUuid: string;
    uuid: string;
}

export interface DisableTokenProfilesRequest {
    requestBody: Array<string>;
}

export interface EditTokenProfileRequest {
    tokenInstanceUuid: string;
    uuid: string;
    editTokenProfileRequestDto: EditTokenProfileRequestDto;
}

export interface EnableTokenProfileRequest {
    tokenInstanceUuid: string;
    uuid: string;
}

export interface EnableTokenProfilesRequest {
    requestBody: Array<string>;
}

export interface GetTokenProfileRequest {
    tokenInstanceUuid: string;
    uuid: string;
}

export interface ListTokenProfilesRequest {
    enabled?: boolean;
}

export interface UpdateKeyUsagesRequest {
    tokenInstanceUuid: string;
    tokenProfileUuid: string;
    tokenProfileKeyUsageRequestDto: TokenProfileKeyUsageRequestDto;
}

export interface UpdateKeysUsagesRequest {
    bulkTokenProfileKeyUsageRequestDto: BulkTokenProfileKeyUsageRequestDto;
}

/**
 * no description
 */
export class TokenProfileManagementApi extends BaseAPI {

    /**
     * Create Token Profile
     */
    createTokenProfile({ tokenInstanceUuid, addTokenProfileRequestDto }: CreateTokenProfileRequest): Observable<TokenProfileDetailDto>
    createTokenProfile({ tokenInstanceUuid, addTokenProfileRequestDto }: CreateTokenProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<TokenProfileDetailDto>>
    createTokenProfile({ tokenInstanceUuid, addTokenProfileRequestDto }: CreateTokenProfileRequest, opts?: OperationOpts): Observable<TokenProfileDetailDto | AjaxResponse<TokenProfileDetailDto>> {
        throwIfNullOrUndefined(tokenInstanceUuid, 'tokenInstanceUuid', 'createTokenProfile');
        throwIfNullOrUndefined(addTokenProfileRequestDto, 'addTokenProfileRequestDto', 'createTokenProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TokenProfileDetailDto>({
            url: '/v1/tokens/{tokenInstanceUuid}/tokenProfiles'.replace('{tokenInstanceUuid}', encodeURI(tokenInstanceUuid)),
            method: 'POST',
            headers,
            body: addTokenProfileRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Delete Token Profile
     */
    deleteRaProfileWithoutTokenInstance({ uuid }: DeleteRaProfileWithoutTokenInstanceRequest): Observable<void>
    deleteRaProfileWithoutTokenInstance({ uuid }: DeleteRaProfileWithoutTokenInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteRaProfileWithoutTokenInstance({ uuid }: DeleteRaProfileWithoutTokenInstanceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'deleteRaProfileWithoutTokenInstance');

        return this.request<void>({
            url: '/v1/tokenProfiles/{uuid}'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Delete Token Profile
     */
    deleteTokenProfile({ tokenInstanceUuid, uuid }: DeleteTokenProfileRequest): Observable<void>
    deleteTokenProfile({ tokenInstanceUuid, uuid }: DeleteTokenProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteTokenProfile({ tokenInstanceUuid, uuid }: DeleteTokenProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(tokenInstanceUuid, 'tokenInstanceUuid', 'deleteTokenProfile');
        throwIfNullOrUndefined(uuid, 'uuid', 'deleteTokenProfile');

        return this.request<void>({
            url: '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}'.replace('{tokenInstanceUuid}', encodeURI(tokenInstanceUuid)).replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Delete multiple Token Profiles
     */
    deleteTokenProfiles({ requestBody }: DeleteTokenProfilesRequest): Observable<void>
    deleteTokenProfiles({ requestBody }: DeleteTokenProfilesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteTokenProfiles({ requestBody }: DeleteTokenProfilesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'deleteTokenProfiles');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/tokenProfiles',
            method: 'DELETE',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Disable Token Profile
     */
    disableTokenProfile({ tokenInstanceUuid, uuid }: DisableTokenProfileRequest): Observable<void>
    disableTokenProfile({ tokenInstanceUuid, uuid }: DisableTokenProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    disableTokenProfile({ tokenInstanceUuid, uuid }: DisableTokenProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(tokenInstanceUuid, 'tokenInstanceUuid', 'disableTokenProfile');
        throwIfNullOrUndefined(uuid, 'uuid', 'disableTokenProfile');

        return this.request<void>({
            url: '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/disable'.replace('{tokenInstanceUuid}', encodeURI(tokenInstanceUuid)).replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Disable multiple Token Profiles
     */
    disableTokenProfiles({ requestBody }: DisableTokenProfilesRequest): Observable<void>
    disableTokenProfiles({ requestBody }: DisableTokenProfilesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    disableTokenProfiles({ requestBody }: DisableTokenProfilesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'disableTokenProfiles');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/tokenProfiles/disable',
            method: 'PATCH',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Edit Token Profile
     */
    editTokenProfile({ tokenInstanceUuid, uuid, editTokenProfileRequestDto }: EditTokenProfileRequest): Observable<TokenProfileDetailDto>
    editTokenProfile({ tokenInstanceUuid, uuid, editTokenProfileRequestDto }: EditTokenProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<TokenProfileDetailDto>>
    editTokenProfile({ tokenInstanceUuid, uuid, editTokenProfileRequestDto }: EditTokenProfileRequest, opts?: OperationOpts): Observable<TokenProfileDetailDto | AjaxResponse<TokenProfileDetailDto>> {
        throwIfNullOrUndefined(tokenInstanceUuid, 'tokenInstanceUuid', 'editTokenProfile');
        throwIfNullOrUndefined(uuid, 'uuid', 'editTokenProfile');
        throwIfNullOrUndefined(editTokenProfileRequestDto, 'editTokenProfileRequestDto', 'editTokenProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TokenProfileDetailDto>({
            url: '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}'.replace('{tokenInstanceUuid}', encodeURI(tokenInstanceUuid)).replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: editTokenProfileRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Enable Token Profile
     */
    enableTokenProfile({ tokenInstanceUuid, uuid }: EnableTokenProfileRequest): Observable<void>
    enableTokenProfile({ tokenInstanceUuid, uuid }: EnableTokenProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    enableTokenProfile({ tokenInstanceUuid, uuid }: EnableTokenProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(tokenInstanceUuid, 'tokenInstanceUuid', 'enableTokenProfile');
        throwIfNullOrUndefined(uuid, 'uuid', 'enableTokenProfile');

        return this.request<void>({
            url: '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/enable'.replace('{tokenInstanceUuid}', encodeURI(tokenInstanceUuid)).replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Enable multiple Token Profiles
     */
    enableTokenProfiles({ requestBody }: EnableTokenProfilesRequest): Observable<void>
    enableTokenProfiles({ requestBody }: EnableTokenProfilesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    enableTokenProfiles({ requestBody }: EnableTokenProfilesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'enableTokenProfiles');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/tokenProfiles/enable',
            method: 'PATCH',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Details of Token Profile
     */
    getTokenProfile({ tokenInstanceUuid, uuid }: GetTokenProfileRequest): Observable<TokenProfileDetailDto>
    getTokenProfile({ tokenInstanceUuid, uuid }: GetTokenProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<TokenProfileDetailDto>>
    getTokenProfile({ tokenInstanceUuid, uuid }: GetTokenProfileRequest, opts?: OperationOpts): Observable<TokenProfileDetailDto | AjaxResponse<TokenProfileDetailDto>> {
        throwIfNullOrUndefined(tokenInstanceUuid, 'tokenInstanceUuid', 'getTokenProfile');
        throwIfNullOrUndefined(uuid, 'uuid', 'getTokenProfile');

        return this.request<TokenProfileDetailDto>({
            url: '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}'.replace('{tokenInstanceUuid}', encodeURI(tokenInstanceUuid)).replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * List of available Token Profiles
     */
    listTokenProfiles({ enabled }: ListTokenProfilesRequest): Observable<Array<TokenProfileDto>>
    listTokenProfiles({ enabled }: ListTokenProfilesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TokenProfileDto>>>
    listTokenProfiles({ enabled }: ListTokenProfilesRequest, opts?: OperationOpts): Observable<Array<TokenProfileDto> | AjaxResponse<Array<TokenProfileDto>>> {

        const query: HttpQuery = {};

        if (enabled != null) { query['enabled'] = enabled; }

        return this.request<Array<TokenProfileDto>>({
            url: '/v1/tokenProfiles',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Key Usage
     */
    updateKeyUsages({ tokenInstanceUuid, tokenProfileUuid, tokenProfileKeyUsageRequestDto }: UpdateKeyUsagesRequest): Observable<void>
    updateKeyUsages({ tokenInstanceUuid, tokenProfileUuid, tokenProfileKeyUsageRequestDto }: UpdateKeyUsagesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    updateKeyUsages({ tokenInstanceUuid, tokenProfileUuid, tokenProfileKeyUsageRequestDto }: UpdateKeyUsagesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(tokenInstanceUuid, 'tokenInstanceUuid', 'updateKeyUsages');
        throwIfNullOrUndefined(tokenProfileUuid, 'tokenProfileUuid', 'updateKeyUsages');
        throwIfNullOrUndefined(tokenProfileKeyUsageRequestDto, 'tokenProfileKeyUsageRequestDto', 'updateKeyUsages');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/usages'.replace('{tokenInstanceUuid}', encodeURI(tokenInstanceUuid)).replace('{tokenProfileUuid}', encodeURI(tokenProfileUuid)),
            method: 'PUT',
            headers,
            body: tokenProfileKeyUsageRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Update Key Usages for Multiple Token Profiles
     */
    updateKeysUsages({ bulkTokenProfileKeyUsageRequestDto }: UpdateKeysUsagesRequest): Observable<void>
    updateKeysUsages({ bulkTokenProfileKeyUsageRequestDto }: UpdateKeysUsagesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    updateKeysUsages({ bulkTokenProfileKeyUsageRequestDto }: UpdateKeysUsagesRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(bulkTokenProfileKeyUsageRequestDto, 'bulkTokenProfileKeyUsageRequestDto', 'updateKeysUsages');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/tokens/usages',
            method: 'PUT',
            headers,
            body: bulkTokenProfileKeyUsageRequestDto,
        }, opts?.responseOpts);
    };

}
