name: Sonar
on:
  workflow_dispatch:
    inputs:
      pr_number:   { description: "PR number", required: true }
      head_sha:    { description: "Head commit SHA", required: true }
      head_repo:   { description: "Fork repo full_name", required: true }
      head_branch: { description: "Fork branch", required: true }
      base_ref:    { description: "Base branch", required: true }

# What appears in the Actions list
run-name: >-
  Sonar • PR #${{ inputs.pr_number }}
  • ${{ inputs.head_repo }}@${{ inputs.head_branch }}
  • ${{ inputs.head_sha }}

permissions:
  contents: read
  checks: write
  pull-requests: read

jobs:
  sonar:
    name: Sonar • PR #${{ inputs.pr_number }}
    runs-on: ubuntu-latest

    steps:
      - name: Export context
        run: |
          echo "PR_NUMBER=${{ inputs.pr_number }}"   >> $GITHUB_ENV
          echo "HEAD_SHA=${{ inputs.head_sha }}"     >> $GITHUB_ENV
          echo "HEAD_REPO=${{ inputs.head_repo }}"   >> $GITHUB_ENV
          echo "PR_BRANCH=${{ inputs.head_branch }}" >> $GITHUB_ENV
          echo "BASE_BRANCH=${{ inputs.base_ref }}"  >> $GITHUB_ENV

      - name: Generate token
        id: app_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.SONAR_GH_APP_ID }}
          private_key: ${{ secrets.SONAR_GH_APP_PRIVATE_KEY }}

      - name: Create GitHub Check (in_progress)
        id: create_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: `SonarQube Analysis,
              head_sha: process.env.HEAD_SHA,
              status: "in_progress"
            });
            core.setOutput("check_id", check.data.id);

      # Checkout fork PR branch + fetch base to compute diff
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.HEAD_REPO }}
          ref: ${{ env.PR_BRANCH }}
          fetch-depth: 0

      - name: Fetch base branch
        run: |
          git remote add upstream ${{ github.event.repository.clone_url }}
          git fetch upstream $BASE_BRANCH
          git checkout -B "$BASE_BRANCH" "upstream/$BASE_BRANCH"
          git checkout "$PR_BRANCH"
          git clean -ffdx && git reset --hard HEAD

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Test build
        run: |
          npm ci
          npm run lint
          npm run build
          npx cypress run --component
          npx nyc report --reporter=lcov --report-dir=coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.scm.revision=${{ env.HEAD_SHA }}
            -Dsonar.pullrequest.key=${{ env.PR_NUMBER }}
            -Dsonar.pullrequest.branch=${{ env.PR_BRANCH }}
            -Dsonar.pullrequest.base=${{ env.BASE_BRANCH }}

      - name: Finalize GitHub Check
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const checkId = "${{ steps.create_check.outputs.check_id }}";
            const status = "${{ job.status }}";
            const conclusions = { success: "success", failure: "failure", cancelled: "cancelled" };
            const conclusion = conclusions[status] || "failure";
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkId,
              completed_at: new Date().toISOString(),
              status: "completed",
              conclusion,
              output: {
                title: "SonarQube Analysis Result",
                summary: `✅ SonarQube analysis concluded with status: **${conclusion}**`,
              }
            });
