name: Sonar
on:
  workflow_run:
    workflows: [ "Check PR" ]
    types: [ completed ]

permissions:
  contents: read
  checks: write
  pull-requests: read

jobs:
  sonar:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Resolve head SHA and PR (handles forks)
        id: ctx
        uses: actions/github-script@v7
        with:
          script: |
            const wr = context.payload.workflow_run;
            
            // Always reliable for workflow_run
            core.setOutput('head_sha', wr.head_sha);
            
            // 1) If GitHub provided the PR on the payload, use it
            let prNumber = wr.pull_requests?.[0]?.number;
            
            // 2) Try to find by commit (works when the commit is in the base repo history)
            if (!prNumber) {
              const { data: prsBySha } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: wr.head_sha,
              });
              prNumber = prsBySha[0]?.number;
            }
            
            // 3) Fork PR fallback: find by "head=owner:branch"
            if (!prNumber) {
              const headOwner = wr.head_repository?.owner?.login;
              const headBranch = wr.head_branch;
              if (headOwner && headBranch) {
                const { data: prsByHead } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  head: `${headOwner}:${headBranch}`,
                });
                prNumber = prsByHead[0]?.number;
              }
            }
            
            core.setOutput('pr_number', prNumber ?? '');

      - name: Debug PR context
        run: |
          echo "event=${{ github.event.workflow_run.event }}"
          echo "head_owner=${{ github.event.workflow_run.head_repository.owner.login }}"
          echo "head_branch=${{ github.event.workflow_run.head_branch }}"
          echo "pull_requests_json=${{ toJson(github.event.workflow_run.pull_requests) }}"
          echo "Resolved PR_NUMBER=$PR_NUMBER"
          echo "Resolved HEAD_SHA=$HEAD_SHA"

      - name: Export env
        run: |
          echo "HEAD_SHA=${{ steps.ctx.outputs.head_sha }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ steps.ctx.outputs.pr_number }}" >> $GITHUB_ENV
          echo "event=${{ github.event.workflow_run.event }}"
          echo "pull_requests_json=${{ toJson(github.event.workflow_run.pull_requests) }}"
          echo "Resolved PR_NUMBER=$PR_NUMBER"
          echo "Resolved HEAD_SHA=$HEAD_SHA"

      - name: Generate token
        id: app_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.SONAR_GH_APP_ID }}
          private_key: ${{ secrets.SONAR_GH_APP_PRIVATE_KEY }}

      - name: Create GitHub Check (in_progress)
        id: create_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "SonarQube Analysis",
              head_sha: process.env.HEAD_SHA, // now always set
              status: "in_progress"
            });
            core.setOutput("check_id", check.data.id);

      # Only fetch PR data when we actually have a PR number
      - name: Request GitHub API for PR data
        if: env.PR_NUMBER != ''
        uses: octokit/request-action@v2.x
        id: get_pr_data
        with:
          route: GET /repos/${{ github.event.repository.full_name }}/pulls/${{ env.PR_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set branch vars
        if: steps.get_pr_data.outputs.data
        run: |
          echo "BASE_BRANCH=$(echo '${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}')" >> $GITHUB_ENV
          echo "PR_BRANCH=$(echo '${{ fromJson(steps.get_pr_data.outputs.data).head.ref }}')" >> $GITHUB_ENV
          echo "ðŸ“Œ BASE_BRANCH: ${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}"
          echo "ðŸ“Œ PR_BRANCH: ${{ fromJson(steps.get_pr_data.outputs.data).head.ref }}"

      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Checkout base branch
        if: env.PR_NUMBER != ''
        run: |
          git remote add upstream ${{ github.event.repository.clone_url }}
          git fetch upstream
          git checkout -B "$BASE_BRANCH" upstream/"$BASE_BRANCH"
          git checkout "$PR_BRANCH"
          git clean -ffdx && git reset --hard HEAD

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Test build
        run: |
          npm install
          npm run lint
          npm run build
          npx cypress run --component
          npx nyc report --reporter=lcov --report-dir=coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.scm.revision=${{ steps.ctx.outputs.head_sha }}
            ${{ env.PR_NUMBER != '' && format('-Dsonar.pullrequest.key={0}', env.PR_NUMBER) || '' }}
            ${{ steps.get_pr_data.outputs.data && format('-Dsonar.pullrequest.branch={0}', fromJson(steps.get_pr_data.outputs.data).head.ref) || '' }}
            ${{ steps.get_pr_data.outputs.data && format('-Dsonar.pullrequest.base={0}', fromJson(steps.get_pr_data.outputs.data).base.ref) || '' }}

      - name: Finalize GitHub Check
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const checkId = "${{ steps.create_check.outputs.check_id }}";
            const status = "${{ job.status }}";
            const conclusions = { success: "success", failure: "failure", cancelled: "cancelled" };
            const conclusion = conclusions[status] || "failure";
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkId,
              completed_at: new Date().toISOString(),
              status: "completed",
              conclusion,
              output: {
                title: "SonarQube Analysis Result",
                summary: `âœ… SonarQube analysis concluded with status: **${conclusion}**`,
              }
            });
